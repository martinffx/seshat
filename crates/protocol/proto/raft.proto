syntax = "proto3";

package raft;

// Raft RPC service for inter-node communication
service RaftService {
  // RequestVote RPC - Used during leader election
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);

  // AppendEntries RPC - Used for log replication and heartbeats
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);

  // InstallSnapshot RPC - Used to transfer snapshots to followers
  rpc InstallSnapshot(InstallSnapshotRequest) returns (InstallSnapshotResponse);
}

// RequestVote RPC
// Invoked by candidates to gather votes during leader election
message RequestVoteRequest {
  // Candidate's term
  uint64 term = 1;

  // Candidate requesting vote
  uint64 candidate_id = 2;

  // Index of candidate's last log entry
  uint64 last_log_index = 3;

  // Term of candidate's last log entry
  uint64 last_log_term = 4;
}

message RequestVoteResponse {
  // Current term, for candidate to update itself
  uint64 term = 1;

  // True means candidate received vote
  bool vote_granted = 2;
}

// AppendEntries RPC
// Invoked by leader to replicate log entries and send heartbeats
message AppendEntriesRequest {
  // Leader's term
  uint64 term = 1;

  // Leader's ID so follower can redirect clients
  uint64 leader_id = 2;

  // Index of log entry immediately preceding new ones
  uint64 prev_log_index = 3;

  // Term of prev_log_index entry
  uint64 prev_log_term = 4;

  // Log entries to store (empty for heartbeat)
  repeated LogEntry entries = 5;

  // Leader's commit index
  uint64 leader_commit = 6;
}

message AppendEntriesResponse {
  // Current term, for leader to update itself
  uint64 term = 1;

  // True if follower contained entry matching prev_log_index and prev_log_term
  bool success = 2;

  // Hint for leader: index of last log entry
  uint64 last_log_index = 3;
}

// InstallSnapshot RPC
// Invoked by leader to send chunks of a snapshot to a follower
message InstallSnapshotRequest {
  // Leader's term
  uint64 term = 1;

  // Leader's ID so follower can redirect clients
  uint64 leader_id = 2;

  // The snapshot replaces all entries up through and including this index
  uint64 last_included_index = 3;

  // Term of last_included_index
  uint64 last_included_term = 4;

  // Byte offset where chunk is positioned in the snapshot file
  uint64 offset = 5;

  // Raw bytes of the snapshot chunk, starting at offset
  bytes data = 6;

  // True if this is the last chunk
  bool done = 7;
}

message InstallSnapshotResponse {
  // Current term, for leader to update itself
  uint64 term = 1;

  // True if follower successfully installed snapshot
  bool success = 2;
}

// LogEntry represents a single entry in the Raft log
message LogEntry {
  // Index in the log
  uint64 index = 1;

  // Term when entry was received by leader
  uint64 term = 2;

  // Type of entry (normal command, configuration change, etc.)
  EntryType entry_type = 3;

  // Serialized command data
  bytes data = 4;
}

// EntryType represents the type of log entry
enum EntryType {
  // Normal client command entry
  ENTRY_TYPE_NORMAL = 0;

  // Configuration change entry (add/remove nodes)
  ENTRY_TYPE_CONF_CHANGE = 1;

  // No-op entry (used by new leaders)
  ENTRY_TYPE_NOOP = 2;
}
